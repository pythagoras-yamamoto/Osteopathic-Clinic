import { jsx, css } from '@emotion/core';
import { useMemo, useRef, useEffect, cloneElement } from 'react';
import t from 'prop-types';
import { Switch } from 'react-router-dom';
import { TransitionGroup, CSSTransition } from 'react-transition-group';

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  display: grid;\n  overflow: hidden;\n  > * {\n    grid-area: 1 / 1 / 2 / 2;\n  }\n  > *:not(:only-child) {\n    &.", "-enter-active, &.", "-exit-active {\n      transition: transform ", "ms ", ";\n    }\n  }\n\n  // back\n  .back-enter {\n    transform: translateX(-100%);\n  }\n  .back-enter-active {\n    transform: translateX(0);\n  }\n  .back-exit {\n    transform: translateX(0);\n  }\n  .back-exit-active {\n    transform: translate(100%);\n  }\n\n  // next\n  .next-enter {\n    transform: translateX(100%);\n  }\n  .next-enter-active {\n    transform: translateX(0);\n  }\n  .next-exit {\n    transform: translateX(0);\n  }\n  .next-exit-active {\n    transform: translateX(-100%);\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
/**
 * useSave
 */

var useSave = function useSave(key, initVal) {
  var initRef = useRef(initVal);
  return useMemo(function () {
    var get = function get() {
      return JSON.parse(sessionStorage.getItem(key));
    };

    var setVal = function setVal(val) {
      return sessionStorage.setItem(key, JSON.stringify(val));
    };

    var removeVal = function removeVal() {
      return sessionStorage.removeItem(key);
    };

    var init = initRef.current;
    if (init !== undefined && get() === null) setVal(init);

    var set = function set(val) {
      var newVal = typeof val === 'function' ? val(get()) : val;
      newVal === undefined ? removeVal() : setVal(newVal);
    };

    return [get, set];
  }, [key]);
};
/**
 * styles
 */


var getCss = function getCss(_ref) {
  var duration = _ref.duration,
      effect = _ref.effect,
      direction = _ref.direction;
  return css(_templateObject(), direction, direction, duration, effect);
};
/**
 * SlideRoutes
 */


var SlideRoutes = function SlideRoutes(_ref2) {
  var location = _ref2.location,
      duration = _ref2.duration,
      effect = _ref2.effect,
      destroy = _ref2.destroy,
      children = _ref2.children;

  var _useSave = useSave('::slide::history::', []),
      getPathList = _useSave[0],
      setPathList = _useSave[1];

  var prevPath = useRef(getPathList()[0]);
  var direction = '';
  var pathname = location.pathname;

  if (prevPath.current !== pathname) {
    prevPath.current = pathname;
    setPathList(function (pathList) {
      var index = pathList.lastIndexOf(pathname);

      if (index === -1) {
        direction = 'next';
        pathList.push(pathname);
      } else {
        direction = 'back';
        pathList.length = index + 1;
      }

      return pathList;
    });
  }

  var CSSProps = destroy ? {
    timeout: duration
  } : {
    addEndListener: function addEndListener() {}
  };
  useEffect(function () {
    return function () {
      setPathList();
    };
  }, [setPathList]);
  return jsx(TransitionGroup, {
    className: "slide-routes",
    childFactory: function childFactory(child) {
      return /*#__PURE__*/cloneElement(child, {
        classNames: direction
      });
    },
    css: getCss({
      duration: duration,
      effect: effect,
      direction: direction
    })
  }, jsx(CSSTransition, Object.assign({
    key: pathname
  }, CSSProps), jsx(Switch, {
    location: location
  }, children)));
};

SlideRoutes.defaultProps = {
  duration: 200,
  effect: 'ease',
  destroy: true
};
SlideRoutes.propTypes = {
  location: t.object.isRequired,
  duration: t.number,
  effect: t.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear']),
  destroy: t.bool,
  children: t.node
};

export default SlideRoutes;
